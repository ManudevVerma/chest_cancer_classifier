#now we will apply DVC (Data Version Control) over pipeline, we also have the option to apply it on data but here we are applying it on pipeline
#dvc uses dvc.lock files to track everything and if something does not change it will not run that particular stage! This is the power of DVC!!!

stages:
  data_ingestion:
    cmd: python -m src.cnnClassifier.pipeline.stage_01_data_ingestion  #this is the command to be executed
    deps:
      - src/cnnClassifier/pipeline/stage_01_data_ingestion.py #this is the dependency
      - config/config.yaml
    outs:
      - artifacts/data_ingestion/Dataset #this is the output file

  prepare_base_model:
    cmd: python -m src.cnnClassifier.pipeline.stage_02_prepare_base_model
    deps:
      - src/cnnClassifier/pipeline/stage_02_prepare_base_model.py
      - config/config.yaml
    params:
      - IMAGE_SIZE
      - INCLUDE_TOP
      - CLASSES
      - WEIGHTS
      - LEARNING_RATE
    outs:
      - artifacts/prepare_base_model

  training:
    cmd: python -m src.cnnClassifier.pipeline.stage_03_model_trainer
    deps:
      - src/cnnClassifier/pipeline/stage_03_model_trainer.py
      - config/config.yaml
      - artifacts/data_ingestion/Dataset
      - artifacts/prepare_base_model
    params:
      - IMAGE_SIZE
      - EPOCHS
      - BATCH_SIZE
      - AUGMENTATION
    outs:
      - artifacts/training/model.h5

  evaluation:
    cmd: python -m src.cnnClassifier.pipeline.stage_04_model_evaluation
    deps:
      - src/cnnClassifier/pipeline/stage_04_model_evaluation.py
      - config/config.yaml
      - artifacts/data_ingestion/Dataset
      - artifacts/training/model.h5
    params:
      - IMAGE_SIZE
      - BATCH_SIZE
    metrics:
      - scores.json:
          cache: false